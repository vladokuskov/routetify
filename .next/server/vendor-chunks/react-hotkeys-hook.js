"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-hotkeys-hook";
exports.ids = ["vendor-chunks/react-hotkeys-hook"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-hotkeys-hook/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-hotkeys-hook/dist/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./react-hotkeys-hook.cjs.development.js */ \"(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.cjs.development.js\")\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90a2V5cy1ob29rL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IjtBQUNZOztBQUVaLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx5S0FBbUU7QUFDckUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90a2V5cy1ob29rL2Rpc3QvaW5kZXguanM/NTRkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbid1c2Ugc3RyaWN0J1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhY3QtaG90a2V5cy1ob29rLmNqcy5wcm9kdWN0aW9uLm1pbi5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcmVhY3QtaG90a2V5cy1ob29rLmNqcy5kZXZlbG9wbWVudC5qcycpXG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-hotkeys-hook/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.cjs.development.js":
/*!************************************************************************************!*\
  !*** ./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.cjs.development.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nvar react = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar jsxRuntime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nvar reservedModifierKeywords = ['shift', 'alt', 'meta', 'mod', 'ctrl'];\nvar mappedKeys = {\n  esc: 'escape',\n  \"return\": 'enter',\n  '.': 'period',\n  ',': 'comma',\n  '-': 'slash',\n  ' ': 'space',\n  '`': 'backquote',\n  '#': 'backslash',\n  '+': 'bracketright',\n  ShiftLeft: 'shift',\n  ShiftRight: 'shift',\n  AltLeft: 'alt',\n  AltRight: 'alt',\n  MetaLeft: 'meta',\n  MetaRight: 'meta',\n  OSLeft: 'meta',\n  OSRight: 'meta',\n  ControlLeft: 'ctrl',\n  ControlRight: 'ctrl'\n};\nfunction mapKey(key) {\n  return (mappedKeys[key] || key).trim().toLowerCase().replace(/key|digit|numpad|arrow/, '');\n}\nfunction isHotkeyModifier(key) {\n  return reservedModifierKeywords.includes(key);\n}\nfunction parseKeysHookInput(keys, splitKey) {\n  if (splitKey === void 0) {\n    splitKey = ',';\n  }\n  return keys.split(splitKey);\n}\nfunction parseHotkey(hotkey, combinationKey, description) {\n  if (combinationKey === void 0) {\n    combinationKey = '+';\n  }\n  var keys = hotkey.toLocaleLowerCase().split(combinationKey).map(function (k) {\n    return mapKey(k);\n  });\n  var modifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl') || keys.includes('control'),\n    shift: keys.includes('shift'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod')\n  };\n  var singleCharKeys = keys.filter(function (k) {\n    return !reservedModifierKeywords.includes(k);\n  });\n  return _extends({}, modifiers, {\n    keys: singleCharKeys,\n    description: description\n  });\n}\n\n(function () {\n  if (typeof document !== 'undefined') {\n    document.addEventListener('keydown', function (e) {\n      if (e.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return;\n      }\n      pushToCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)]);\n    });\n    document.addEventListener('keyup', function (e) {\n      if (e.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return;\n      }\n      removeFromCurrentlyPressedKeys([mapKey(e.key), mapKey(e.code)]);\n    });\n  }\n  if (typeof window !== 'undefined') {\n    window.addEventListener('blur', function () {\n      currentlyPressedKeys.clear();\n    });\n  }\n})();\nvar currentlyPressedKeys = /*#__PURE__*/new Set();\n// https://github.com/microsoft/TypeScript/issues/17002\nfunction isReadonlyArray(value) {\n  return Array.isArray(value);\n}\nfunction isHotkeyPressed(key, splitKey) {\n  if (splitKey === void 0) {\n    splitKey = ',';\n  }\n  var hotkeyArray = isReadonlyArray(key) ? key : key.split(splitKey);\n  return hotkeyArray.every(function (hotkey) {\n    return currentlyPressedKeys.has(hotkey.trim().toLowerCase());\n  });\n}\nfunction pushToCurrentlyPressedKeys(key) {\n  var hotkeyArray = Array.isArray(key) ? key : [key];\n  /*\r\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\r\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\r\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\r\n   */\n  if (currentlyPressedKeys.has('meta')) {\n    currentlyPressedKeys.forEach(function (key) {\n      return !isHotkeyModifier(key) && currentlyPressedKeys[\"delete\"](key.toLowerCase());\n    });\n  }\n  hotkeyArray.forEach(function (hotkey) {\n    return currentlyPressedKeys.add(hotkey.toLowerCase());\n  });\n}\nfunction removeFromCurrentlyPressedKeys(key) {\n  var hotkeyArray = Array.isArray(key) ? key : [key];\n  /*\r\n  Due to a weird behavior on macOS we need to clear the set if the user pressed down the meta key and presses another key.\r\n  https://stackoverflow.com/questions/11818637/why-does-javascript-drop-keyup-events-when-the-metakey-is-pressed-on-mac-browser\r\n  Otherwise the set will hold all ever pressed keys while the meta key is down which leads to wrong results.\r\n   */\n  if (key === 'meta') {\n    currentlyPressedKeys.clear();\n  } else {\n    hotkeyArray.forEach(function (hotkey) {\n      return currentlyPressedKeys[\"delete\"](hotkey.toLowerCase());\n    });\n  }\n}\n\nfunction maybePreventDefault(e, hotkey, preventDefault) {\n  if (typeof preventDefault === 'function' && preventDefault(e, hotkey) || preventDefault === true) {\n    e.preventDefault();\n  }\n}\nfunction isHotkeyEnabled(e, hotkey, enabled) {\n  if (typeof enabled === 'function') {\n    return enabled(e, hotkey);\n  }\n  return enabled === true || enabled === undefined;\n}\nfunction isKeyboardEventTriggeredByInput(ev) {\n  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select']);\n}\nfunction isHotkeyEnabledOnTag(_ref, enabledOnTags) {\n  var target = _ref.target;\n  if (enabledOnTags === void 0) {\n    enabledOnTags = false;\n  }\n  var targetTagName = target && target.tagName;\n  if (isReadonlyArray(enabledOnTags)) {\n    return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(function (tag) {\n      return tag.toLowerCase() === targetTagName.toLowerCase();\n    }));\n  }\n  return Boolean(targetTagName && enabledOnTags && enabledOnTags === true);\n}\nfunction isScopeActive(activeScopes, scopes) {\n  if (activeScopes.length === 0 && scopes) {\n    console.warn('A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>');\n    return true;\n  }\n  if (!scopes) {\n    return true;\n  }\n  return activeScopes.some(function (scope) {\n    return scopes.includes(scope);\n  }) || activeScopes.includes('*');\n}\nvar isHotkeyMatchingKeyboardEvent = function isHotkeyMatchingKeyboardEvent(e, hotkey, ignoreModifiers) {\n  if (ignoreModifiers === void 0) {\n    ignoreModifiers = false;\n  }\n  var alt = hotkey.alt,\n    meta = hotkey.meta,\n    mod = hotkey.mod,\n    shift = hotkey.shift,\n    ctrl = hotkey.ctrl,\n    keys = hotkey.keys;\n  var pressedKeyUppercase = e.key,\n    code = e.code,\n    ctrlKey = e.ctrlKey,\n    metaKey = e.metaKey,\n    shiftKey = e.shiftKey,\n    altKey = e.altKey;\n  var keyCode = mapKey(code);\n  var pressedKey = pressedKeyUppercase.toLowerCase();\n  if (!ignoreModifiers) {\n    // We check the pressed keys for compatibility with the keyup event. In keyup events the modifier flags are not set.\n    if (alt === !altKey && pressedKey !== 'alt') {\n      return false;\n    }\n    if (shift === !shiftKey && pressedKey !== 'shift') {\n      return false;\n    }\n    // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n    if (mod) {\n      if (!metaKey && !ctrlKey) {\n        return false;\n      }\n    } else {\n      if (meta === !metaKey && pressedKey !== 'meta' && pressedKey !== 'os') {\n        return false;\n      }\n      if (ctrl === !ctrlKey && pressedKey !== 'ctrl' && pressedKey !== 'control') {\n        return false;\n      }\n    }\n  }\n  // All modifiers are correct, now check the key\n  // If the key is set, we check for the key\n  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {\n    return true;\n  } else if (keys) {\n    // Check if all keys are present in pressedDownKeys set\n    return isHotkeyPressed(keys);\n  } else if (!keys) {\n    // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n    return true;\n  }\n  // There is nothing that matches.\n  return false;\n};\n\nvar BoundHotkeysProxyProvider = /*#__PURE__*/react.createContext(undefined);\nvar useBoundHotkeysProxy = function useBoundHotkeysProxy() {\n  return react.useContext(BoundHotkeysProxyProvider);\n};\nfunction BoundHotkeysProxyProviderProvider(_ref) {\n  var addHotkey = _ref.addHotkey,\n    removeHotkey = _ref.removeHotkey,\n    children = _ref.children;\n  return /*#__PURE__*/jsxRuntime.jsx(BoundHotkeysProxyProvider.Provider, {\n    value: {\n      addHotkey: addHotkey,\n      removeHotkey: removeHotkey\n    },\n    children: children\n  });\n}\n\nfunction deepEqual(x, y) {\n  //@ts-ignore\n  return x && y && typeof x === 'object' && typeof y === 'object' ? Object.keys(x).length === Object.keys(y).length &&\n  //@ts-ignore\n  Object.keys(x).reduce(function (isEqual, key) {\n    return isEqual && deepEqual(x[key], y[key]);\n  }, true) : x === y;\n}\n\nvar HotkeysContext = /*#__PURE__*/react.createContext({\n  hotkeys: [],\n  enabledScopes: [],\n  toggleScope: function toggleScope() {},\n  enableScope: function enableScope() {},\n  disableScope: function disableScope() {}\n});\nvar useHotkeysContext = function useHotkeysContext() {\n  return react.useContext(HotkeysContext);\n};\nvar HotkeysProvider = function HotkeysProvider(_ref) {\n  var _ref$initiallyActiveS = _ref.initiallyActiveScopes,\n    initiallyActiveScopes = _ref$initiallyActiveS === void 0 ? ['*'] : _ref$initiallyActiveS,\n    children = _ref.children;\n  var _useState = react.useState((initiallyActiveScopes == null ? void 0 : initiallyActiveScopes.length) > 0 ? initiallyActiveScopes : ['*']),\n    internalActiveScopes = _useState[0],\n    setInternalActiveScopes = _useState[1];\n  var _useState2 = react.useState([]),\n    boundHotkeys = _useState2[0],\n    setBoundHotkeys = _useState2[1];\n  var enableScope = react.useCallback(function (scope) {\n    setInternalActiveScopes(function (prev) {\n      if (prev.includes('*')) {\n        return [scope];\n      }\n      return Array.from(new Set([].concat(prev, [scope])));\n    });\n  }, []);\n  var disableScope = react.useCallback(function (scope) {\n    setInternalActiveScopes(function (prev) {\n      if (prev.filter(function (s) {\n        return s !== scope;\n      }).length === 0) {\n        return ['*'];\n      } else {\n        return prev.filter(function (s) {\n          return s !== scope;\n        });\n      }\n    });\n  }, []);\n  var toggleScope = react.useCallback(function (scope) {\n    setInternalActiveScopes(function (prev) {\n      if (prev.includes(scope)) {\n        if (prev.filter(function (s) {\n          return s !== scope;\n        }).length === 0) {\n          return ['*'];\n        } else {\n          return prev.filter(function (s) {\n            return s !== scope;\n          });\n        }\n      } else {\n        if (prev.includes('*')) {\n          return [scope];\n        }\n        return Array.from(new Set([].concat(prev, [scope])));\n      }\n    });\n  }, []);\n  var addBoundHotkey = react.useCallback(function (hotkey) {\n    setBoundHotkeys(function (prev) {\n      return [].concat(prev, [hotkey]);\n    });\n  }, []);\n  var removeBoundHotkey = react.useCallback(function (hotkey) {\n    setBoundHotkeys(function (prev) {\n      return prev.filter(function (h) {\n        return !deepEqual(h, hotkey);\n      });\n    });\n  }, []);\n  return /*#__PURE__*/jsxRuntime.jsx(HotkeysContext.Provider, {\n    value: {\n      enabledScopes: internalActiveScopes,\n      hotkeys: boundHotkeys,\n      enableScope: enableScope,\n      disableScope: disableScope,\n      toggleScope: toggleScope\n    },\n    children: /*#__PURE__*/jsxRuntime.jsx(BoundHotkeysProxyProviderProvider, {\n      addHotkey: addBoundHotkey,\n      removeHotkey: removeBoundHotkey,\n      children: children\n    })\n  });\n};\n\nfunction useDeepEqualMemo(value) {\n  var ref = react.useRef(undefined);\n  if (!deepEqual(ref.current, value)) {\n    ref.current = value;\n  }\n  return ref.current;\n}\n\nvar stopPropagation = function stopPropagation(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  e.stopImmediatePropagation();\n};\nvar useSafeLayoutEffect = typeof window !== 'undefined' ? react.useLayoutEffect : react.useEffect;\nfunction useHotkeys(keys, callback, options, dependencies) {\n  var ref = react.useRef(null);\n  var hasTriggeredRef = react.useRef(false);\n  var _options = !(options instanceof Array) ? options : !(dependencies instanceof Array) ? dependencies : undefined;\n  var _keys = isReadonlyArray(keys) ? keys.join(_options == null ? void 0 : _options.splitKey) : keys;\n  var _deps = options instanceof Array ? options : dependencies instanceof Array ? dependencies : undefined;\n  var memoisedCB = react.useCallback(callback, _deps != null ? _deps : []);\n  var cbRef = react.useRef(memoisedCB);\n  if (_deps) {\n    cbRef.current = memoisedCB;\n  } else {\n    cbRef.current = callback;\n  }\n  var memoisedOptions = useDeepEqualMemo(_options);\n  var _useHotkeysContext = useHotkeysContext(),\n    enabledScopes = _useHotkeysContext.enabledScopes;\n  var proxy = useBoundHotkeysProxy();\n  useSafeLayoutEffect(function () {\n    if ((memoisedOptions == null ? void 0 : memoisedOptions.enabled) === false || !isScopeActive(enabledScopes, memoisedOptions == null ? void 0 : memoisedOptions.scopes)) {\n      return;\n    }\n    var listener = function listener(e, isKeyUp) {\n      var _e$target;\n      if (isKeyUp === void 0) {\n        isKeyUp = false;\n      }\n      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions == null ? void 0 : memoisedOptions.enableOnFormTags)) {\n        return;\n      }\n      if (memoisedOptions != null && memoisedOptions.ignoreEventWhen != null && memoisedOptions.ignoreEventWhen(e)) {\n        return;\n      }\n      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WON'T TRIGGER THE HOTKEY.\n      if (ref.current !== null && document.activeElement !== ref.current && !ref.current.contains(document.activeElement)) {\n        stopPropagation(e);\n        return;\n      }\n      if ((_e$target = e.target) != null && _e$target.isContentEditable && !(memoisedOptions != null && memoisedOptions.enableOnContentEditable)) {\n        return;\n      }\n      parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function (key) {\n        var _hotkey$keys;\n        var hotkey = parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey);\n        if (isHotkeyMatchingKeyboardEvent(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.ignoreModifiers) || (_hotkey$keys = hotkey.keys) != null && _hotkey$keys.includes('*')) {\n          if (isKeyUp && hasTriggeredRef.current) {\n            return;\n          }\n          maybePreventDefault(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.preventDefault);\n          if (!isHotkeyEnabled(e, hotkey, memoisedOptions == null ? void 0 : memoisedOptions.enabled)) {\n            stopPropagation(e);\n            return;\n          }\n          // Execute the user callback for that hotkey\n          cbRef.current(e, hotkey);\n          if (!isKeyUp) {\n            hasTriggeredRef.current = true;\n          }\n        }\n      });\n    };\n    var handleKeyDown = function handleKeyDown(event) {\n      if (event.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return;\n      }\n      pushToCurrentlyPressedKeys(mapKey(event.code));\n      if ((memoisedOptions == null ? void 0 : memoisedOptions.keydown) === undefined && (memoisedOptions == null ? void 0 : memoisedOptions.keyup) !== true || memoisedOptions != null && memoisedOptions.keydown) {\n        listener(event);\n      }\n    };\n    var handleKeyUp = function handleKeyUp(event) {\n      if (event.key === undefined) {\n        // Synthetic event (e.g., Chrome autofill).  Ignore.\n        return;\n      }\n      removeFromCurrentlyPressedKeys(mapKey(event.code));\n      hasTriggeredRef.current = false;\n      if (memoisedOptions != null && memoisedOptions.keyup) {\n        listener(event, true);\n      }\n    };\n    var domNode = ref.current || (_options == null ? void 0 : _options.document) || document;\n    // @ts-ignore\n    domNode.addEventListener('keyup', handleKeyUp);\n    // @ts-ignore\n    domNode.addEventListener('keydown', handleKeyDown);\n    if (proxy) {\n      parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function (key) {\n        return proxy.addHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey, memoisedOptions == null ? void 0 : memoisedOptions.description));\n      });\n    }\n    return function () {\n      // @ts-ignore\n      domNode.removeEventListener('keyup', handleKeyUp);\n      // @ts-ignore\n      domNode.removeEventListener('keydown', handleKeyDown);\n      if (proxy) {\n        parseKeysHookInput(_keys, memoisedOptions == null ? void 0 : memoisedOptions.splitKey).forEach(function (key) {\n          return proxy.removeHotkey(parseHotkey(key, memoisedOptions == null ? void 0 : memoisedOptions.combinationKey, memoisedOptions == null ? void 0 : memoisedOptions.description));\n        });\n      }\n    };\n  }, [_keys, memoisedOptions, enabledScopes]);\n  return ref;\n}\n\nfunction useRecordHotkeys() {\n  var _useState = react.useState(new Set()),\n    keys = _useState[0],\n    setKeys = _useState[1];\n  var _useState2 = react.useState(false),\n    isRecording = _useState2[0],\n    setIsRecording = _useState2[1];\n  var handler = react.useCallback(function (event) {\n    if (event.key === undefined) {\n      // Synthetic event (e.g., Chrome autofill).  Ignore.\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    setKeys(function (prev) {\n      var newKeys = new Set(prev);\n      newKeys.add(mapKey(event.code));\n      return newKeys;\n    });\n  }, []);\n  var stop = react.useCallback(function () {\n    if (typeof document !== 'undefined') {\n      document.removeEventListener('keydown', handler);\n      setIsRecording(false);\n    }\n  }, [handler]);\n  var start = react.useCallback(function () {\n    setKeys(new Set());\n    if (typeof document !== 'undefined') {\n      stop();\n      document.addEventListener('keydown', handler);\n      setIsRecording(true);\n    }\n  }, [handler, stop]);\n  return [keys, {\n    start: start,\n    stop: stop,\n    isRecording: isRecording\n  }];\n}\n\nexports.HotkeysProvider = HotkeysProvider;\nexports.isHotkeyPressed = isHotkeyPressed;\nexports.useHotkeys = useHotkeys;\nexports.useHotkeysContext = useHotkeysContext;\nexports.useRecordHotkeys = useRecordHotkeys;\n//# sourceMappingURL=react-hotkeys-hook.cjs.development.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90a2V5cy1ob29rL2Rpc3QvcmVhY3QtaG90a2V5cy1ob29rLmNqcy5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixZQUFZLG1CQUFPLENBQUMsd0dBQU87QUFDM0IsaUJBQWlCLG1CQUFPLENBQUMsZ0lBQW1COztBQUU1QztBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEMsd0NBQXdDO0FBQ3hDO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHVCQUF1QjtBQUN2Qix1QkFBdUI7QUFDdkIsa0JBQWtCO0FBQ2xCLHlCQUF5QjtBQUN6Qix3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90a2V5cy1ob29rL2Rpc3QvcmVhY3QtaG90a2V5cy1ob29rLmNqcy5kZXZlbG9wbWVudC5qcz8xZDVhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbnZhciBqc3hSdW50aW1lID0gcmVxdWlyZSgncmVhY3QvanN4LXJ1bnRpbWUnKTtcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciByZXNlcnZlZE1vZGlmaWVyS2V5d29yZHMgPSBbJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJywgJ21vZCcsICdjdHJsJ107XG52YXIgbWFwcGVkS2V5cyA9IHtcbiAgZXNjOiAnZXNjYXBlJyxcbiAgXCJyZXR1cm5cIjogJ2VudGVyJyxcbiAgJy4nOiAncGVyaW9kJyxcbiAgJywnOiAnY29tbWEnLFxuICAnLSc6ICdzbGFzaCcsXG4gICcgJzogJ3NwYWNlJyxcbiAgJ2AnOiAnYmFja3F1b3RlJyxcbiAgJyMnOiAnYmFja3NsYXNoJyxcbiAgJysnOiAnYnJhY2tldHJpZ2h0JyxcbiAgU2hpZnRMZWZ0OiAnc2hpZnQnLFxuICBTaGlmdFJpZ2h0OiAnc2hpZnQnLFxuICBBbHRMZWZ0OiAnYWx0JyxcbiAgQWx0UmlnaHQ6ICdhbHQnLFxuICBNZXRhTGVmdDogJ21ldGEnLFxuICBNZXRhUmlnaHQ6ICdtZXRhJyxcbiAgT1NMZWZ0OiAnbWV0YScsXG4gIE9TUmlnaHQ6ICdtZXRhJyxcbiAgQ29udHJvbExlZnQ6ICdjdHJsJyxcbiAgQ29udHJvbFJpZ2h0OiAnY3RybCdcbn07XG5mdW5jdGlvbiBtYXBLZXkoa2V5KSB7XG4gIHJldHVybiAobWFwcGVkS2V5c1trZXldIHx8IGtleSkudHJpbSgpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgva2V5fGRpZ2l0fG51bXBhZHxhcnJvdy8sICcnKTtcbn1cbmZ1bmN0aW9uIGlzSG90a2V5TW9kaWZpZXIoa2V5KSB7XG4gIHJldHVybiByZXNlcnZlZE1vZGlmaWVyS2V5d29yZHMuaW5jbHVkZXMoa2V5KTtcbn1cbmZ1bmN0aW9uIHBhcnNlS2V5c0hvb2tJbnB1dChrZXlzLCBzcGxpdEtleSkge1xuICBpZiAoc3BsaXRLZXkgPT09IHZvaWQgMCkge1xuICAgIHNwbGl0S2V5ID0gJywnO1xuICB9XG4gIHJldHVybiBrZXlzLnNwbGl0KHNwbGl0S2V5KTtcbn1cbmZ1bmN0aW9uIHBhcnNlSG90a2V5KGhvdGtleSwgY29tYmluYXRpb25LZXksIGRlc2NyaXB0aW9uKSB7XG4gIGlmIChjb21iaW5hdGlvbktleSA9PT0gdm9pZCAwKSB7XG4gICAgY29tYmluYXRpb25LZXkgPSAnKyc7XG4gIH1cbiAgdmFyIGtleXMgPSBob3RrZXkudG9Mb2NhbGVMb3dlckNhc2UoKS5zcGxpdChjb21iaW5hdGlvbktleSkubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG1hcEtleShrKTtcbiAgfSk7XG4gIHZhciBtb2RpZmllcnMgPSB7XG4gICAgYWx0OiBrZXlzLmluY2x1ZGVzKCdhbHQnKSxcbiAgICBjdHJsOiBrZXlzLmluY2x1ZGVzKCdjdHJsJykgfHwga2V5cy5pbmNsdWRlcygnY29udHJvbCcpLFxuICAgIHNoaWZ0OiBrZXlzLmluY2x1ZGVzKCdzaGlmdCcpLFxuICAgIG1ldGE6IGtleXMuaW5jbHVkZXMoJ21ldGEnKSxcbiAgICBtb2Q6IGtleXMuaW5jbHVkZXMoJ21vZCcpXG4gIH07XG4gIHZhciBzaW5nbGVDaGFyS2V5cyA9IGtleXMuZmlsdGVyKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuICFyZXNlcnZlZE1vZGlmaWVyS2V5d29yZHMuaW5jbHVkZXMoayk7XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG1vZGlmaWVycywge1xuICAgIGtleXM6IHNpbmdsZUNoYXJLZXlzLFxuICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvblxuICB9KTtcbn1cblxuKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChlLmtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIFN5bnRoZXRpYyBldmVudCAoZS5nLiwgQ2hyb21lIGF1dG9maWxsKS4gIElnbm9yZS5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcHVzaFRvQ3VycmVudGx5UHJlc3NlZEtleXMoW21hcEtleShlLmtleSksIG1hcEtleShlLmNvZGUpXSk7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUua2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gU3ludGhldGljIGV2ZW50IChlLmcuLCBDaHJvbWUgYXV0b2ZpbGwpLiAgSWdub3JlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZW1vdmVGcm9tQ3VycmVudGx5UHJlc3NlZEtleXMoW21hcEtleShlLmtleSksIG1hcEtleShlLmNvZGUpXSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50bHlQcmVzc2VkS2V5cy5jbGVhcigpO1xuICAgIH0pO1xuICB9XG59KSgpO1xudmFyIGN1cnJlbnRseVByZXNzZWRLZXlzID0gLyojX19QVVJFX18qL25ldyBTZXQoKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMTcwMDJcbmZ1bmN0aW9uIGlzUmVhZG9ubHlBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBpc0hvdGtleVByZXNzZWQoa2V5LCBzcGxpdEtleSkge1xuICBpZiAoc3BsaXRLZXkgPT09IHZvaWQgMCkge1xuICAgIHNwbGl0S2V5ID0gJywnO1xuICB9XG4gIHZhciBob3RrZXlBcnJheSA9IGlzUmVhZG9ubHlBcnJheShrZXkpID8ga2V5IDoga2V5LnNwbGl0KHNwbGl0S2V5KTtcbiAgcmV0dXJuIGhvdGtleUFycmF5LmV2ZXJ5KGZ1bmN0aW9uIChob3RrZXkpIHtcbiAgICByZXR1cm4gY3VycmVudGx5UHJlc3NlZEtleXMuaGFzKGhvdGtleS50cmltKCkudG9Mb3dlckNhc2UoKSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcHVzaFRvQ3VycmVudGx5UHJlc3NlZEtleXMoa2V5KSB7XG4gIHZhciBob3RrZXlBcnJheSA9IEFycmF5LmlzQXJyYXkoa2V5KSA/IGtleSA6IFtrZXldO1xuICAvKlxyXG4gIER1ZSB0byBhIHdlaXJkIGJlaGF2aW9yIG9uIG1hY09TIHdlIG5lZWQgdG8gY2xlYXIgdGhlIHNldCBpZiB0aGUgdXNlciBwcmVzc2VkIGRvd24gdGhlIG1ldGEga2V5IGFuZCBwcmVzc2VzIGFub3RoZXIga2V5LlxyXG4gIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExODE4NjM3L3doeS1kb2VzLWphdmFzY3JpcHQtZHJvcC1rZXl1cC1ldmVudHMtd2hlbi10aGUtbWV0YWtleS1pcy1wcmVzc2VkLW9uLW1hYy1icm93c2VyXHJcbiAgT3RoZXJ3aXNlIHRoZSBzZXQgd2lsbCBob2xkIGFsbCBldmVyIHByZXNzZWQga2V5cyB3aGlsZSB0aGUgbWV0YSBrZXkgaXMgZG93biB3aGljaCBsZWFkcyB0byB3cm9uZyByZXN1bHRzLlxyXG4gICAqL1xuICBpZiAoY3VycmVudGx5UHJlc3NlZEtleXMuaGFzKCdtZXRhJykpIHtcbiAgICBjdXJyZW50bHlQcmVzc2VkS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiAhaXNIb3RrZXlNb2RpZmllcihrZXkpICYmIGN1cnJlbnRseVByZXNzZWRLZXlzW1wiZGVsZXRlXCJdKGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9KTtcbiAgfVxuICBob3RrZXlBcnJheS5mb3JFYWNoKGZ1bmN0aW9uIChob3RrZXkpIHtcbiAgICByZXR1cm4gY3VycmVudGx5UHJlc3NlZEtleXMuYWRkKGhvdGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgfSk7XG59XG5mdW5jdGlvbiByZW1vdmVGcm9tQ3VycmVudGx5UHJlc3NlZEtleXMoa2V5KSB7XG4gIHZhciBob3RrZXlBcnJheSA9IEFycmF5LmlzQXJyYXkoa2V5KSA/IGtleSA6IFtrZXldO1xuICAvKlxyXG4gIER1ZSB0byBhIHdlaXJkIGJlaGF2aW9yIG9uIG1hY09TIHdlIG5lZWQgdG8gY2xlYXIgdGhlIHNldCBpZiB0aGUgdXNlciBwcmVzc2VkIGRvd24gdGhlIG1ldGEga2V5IGFuZCBwcmVzc2VzIGFub3RoZXIga2V5LlxyXG4gIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzExODE4NjM3L3doeS1kb2VzLWphdmFzY3JpcHQtZHJvcC1rZXl1cC1ldmVudHMtd2hlbi10aGUtbWV0YWtleS1pcy1wcmVzc2VkLW9uLW1hYy1icm93c2VyXHJcbiAgT3RoZXJ3aXNlIHRoZSBzZXQgd2lsbCBob2xkIGFsbCBldmVyIHByZXNzZWQga2V5cyB3aGlsZSB0aGUgbWV0YSBrZXkgaXMgZG93biB3aGljaCBsZWFkcyB0byB3cm9uZyByZXN1bHRzLlxyXG4gICAqL1xuICBpZiAoa2V5ID09PSAnbWV0YScpIHtcbiAgICBjdXJyZW50bHlQcmVzc2VkS2V5cy5jbGVhcigpO1xuICB9IGVsc2Uge1xuICAgIGhvdGtleUFycmF5LmZvckVhY2goZnVuY3Rpb24gKGhvdGtleSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRseVByZXNzZWRLZXlzW1wiZGVsZXRlXCJdKGhvdGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVByZXZlbnREZWZhdWx0KGUsIGhvdGtleSwgcHJldmVudERlZmF1bHQpIHtcbiAgaWYgKHR5cGVvZiBwcmV2ZW50RGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJyAmJiBwcmV2ZW50RGVmYXVsdChlLCBob3RrZXkpIHx8IHByZXZlbnREZWZhdWx0ID09PSB0cnVlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59XG5mdW5jdGlvbiBpc0hvdGtleUVuYWJsZWQoZSwgaG90a2V5LCBlbmFibGVkKSB7XG4gIGlmICh0eXBlb2YgZW5hYmxlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbmFibGVkKGUsIGhvdGtleSk7XG4gIH1cbiAgcmV0dXJuIGVuYWJsZWQgPT09IHRydWUgfHwgZW5hYmxlZCA9PT0gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gaXNLZXlib2FyZEV2ZW50VHJpZ2dlcmVkQnlJbnB1dChldikge1xuICByZXR1cm4gaXNIb3RrZXlFbmFibGVkT25UYWcoZXYsIFsnaW5wdXQnLCAndGV4dGFyZWEnLCAnc2VsZWN0J10pO1xufVxuZnVuY3Rpb24gaXNIb3RrZXlFbmFibGVkT25UYWcoX3JlZiwgZW5hYmxlZE9uVGFncykge1xuICB2YXIgdGFyZ2V0ID0gX3JlZi50YXJnZXQ7XG4gIGlmIChlbmFibGVkT25UYWdzID09PSB2b2lkIDApIHtcbiAgICBlbmFibGVkT25UYWdzID0gZmFsc2U7XG4gIH1cbiAgdmFyIHRhcmdldFRhZ05hbWUgPSB0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWU7XG4gIGlmIChpc1JlYWRvbmx5QXJyYXkoZW5hYmxlZE9uVGFncykpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0YXJnZXRUYWdOYW1lICYmIGVuYWJsZWRPblRhZ3MgJiYgZW5hYmxlZE9uVGFncy5zb21lKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgIHJldHVybiB0YWcudG9Mb3dlckNhc2UoKSA9PT0gdGFyZ2V0VGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pKTtcbiAgfVxuICByZXR1cm4gQm9vbGVhbih0YXJnZXRUYWdOYW1lICYmIGVuYWJsZWRPblRhZ3MgJiYgZW5hYmxlZE9uVGFncyA9PT0gdHJ1ZSk7XG59XG5mdW5jdGlvbiBpc1Njb3BlQWN0aXZlKGFjdGl2ZVNjb3Blcywgc2NvcGVzKSB7XG4gIGlmIChhY3RpdmVTY29wZXMubGVuZ3RoID09PSAwICYmIHNjb3Blcykge1xuICAgIGNvbnNvbGUud2FybignQSBob3RrZXkgaGFzIHRoZSBcInNjb3Blc1wiIG9wdGlvbiBzZXQsIGhvd2V2ZXIgbm8gYWN0aXZlIHNjb3BlcyB3ZXJlIGZvdW5kLiBJZiB5b3Ugd2FudCB0byB1c2UgdGhlIGdsb2JhbCBzY29wZXMgZmVhdHVyZSwgeW91IG5lZWQgdG8gd3JhcCB5b3VyIGFwcCBpbiBhIDxIb3RrZXlzUHJvdmlkZXI+Jyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFzY29wZXMpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gYWN0aXZlU2NvcGVzLnNvbWUoZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgcmV0dXJuIHNjb3Blcy5pbmNsdWRlcyhzY29wZSk7XG4gIH0pIHx8IGFjdGl2ZVNjb3Blcy5pbmNsdWRlcygnKicpO1xufVxudmFyIGlzSG90a2V5TWF0Y2hpbmdLZXlib2FyZEV2ZW50ID0gZnVuY3Rpb24gaXNIb3RrZXlNYXRjaGluZ0tleWJvYXJkRXZlbnQoZSwgaG90a2V5LCBpZ25vcmVNb2RpZmllcnMpIHtcbiAgaWYgKGlnbm9yZU1vZGlmaWVycyA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlTW9kaWZpZXJzID0gZmFsc2U7XG4gIH1cbiAgdmFyIGFsdCA9IGhvdGtleS5hbHQsXG4gICAgbWV0YSA9IGhvdGtleS5tZXRhLFxuICAgIG1vZCA9IGhvdGtleS5tb2QsXG4gICAgc2hpZnQgPSBob3RrZXkuc2hpZnQsXG4gICAgY3RybCA9IGhvdGtleS5jdHJsLFxuICAgIGtleXMgPSBob3RrZXkua2V5cztcbiAgdmFyIHByZXNzZWRLZXlVcHBlcmNhc2UgPSBlLmtleSxcbiAgICBjb2RlID0gZS5jb2RlLFxuICAgIGN0cmxLZXkgPSBlLmN0cmxLZXksXG4gICAgbWV0YUtleSA9IGUubWV0YUtleSxcbiAgICBzaGlmdEtleSA9IGUuc2hpZnRLZXksXG4gICAgYWx0S2V5ID0gZS5hbHRLZXk7XG4gIHZhciBrZXlDb2RlID0gbWFwS2V5KGNvZGUpO1xuICB2YXIgcHJlc3NlZEtleSA9IHByZXNzZWRLZXlVcHBlcmNhc2UudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCFpZ25vcmVNb2RpZmllcnMpIHtcbiAgICAvLyBXZSBjaGVjayB0aGUgcHJlc3NlZCBrZXlzIGZvciBjb21wYXRpYmlsaXR5IHdpdGggdGhlIGtleXVwIGV2ZW50LiBJbiBrZXl1cCBldmVudHMgdGhlIG1vZGlmaWVyIGZsYWdzIGFyZSBub3Qgc2V0LlxuICAgIGlmIChhbHQgPT09ICFhbHRLZXkgJiYgcHJlc3NlZEtleSAhPT0gJ2FsdCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHNoaWZ0ID09PSAhc2hpZnRLZXkgJiYgcHJlc3NlZEtleSAhPT0gJ3NoaWZ0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBNb2QgaXMgYSBzcGVjaWFsIGtleSBuYW1lIHRoYXQgaXMgY2hlY2tpbmcgZm9yIG1ldGEgb24gbWFjT1MgYW5kIGN0cmwgb24gb3RoZXIgcGxhdGZvcm1zXG4gICAgaWYgKG1vZCkge1xuICAgICAgaWYgKCFtZXRhS2V5ICYmICFjdHJsS2V5KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1ldGEgPT09ICFtZXRhS2V5ICYmIHByZXNzZWRLZXkgIT09ICdtZXRhJyAmJiBwcmVzc2VkS2V5ICE9PSAnb3MnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdHJsID09PSAhY3RybEtleSAmJiBwcmVzc2VkS2V5ICE9PSAnY3RybCcgJiYgcHJlc3NlZEtleSAhPT0gJ2NvbnRyb2wnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gQWxsIG1vZGlmaWVycyBhcmUgY29ycmVjdCwgbm93IGNoZWNrIHRoZSBrZXlcbiAgLy8gSWYgdGhlIGtleSBpcyBzZXQsIHdlIGNoZWNrIGZvciB0aGUga2V5XG4gIGlmIChrZXlzICYmIGtleXMubGVuZ3RoID09PSAxICYmIChrZXlzLmluY2x1ZGVzKHByZXNzZWRLZXkpIHx8IGtleXMuaW5jbHVkZXMoa2V5Q29kZSkpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoa2V5cykge1xuICAgIC8vIENoZWNrIGlmIGFsbCBrZXlzIGFyZSBwcmVzZW50IGluIHByZXNzZWREb3duS2V5cyBzZXRcbiAgICByZXR1cm4gaXNIb3RrZXlQcmVzc2VkKGtleXMpO1xuICB9IGVsc2UgaWYgKCFrZXlzKSB7XG4gICAgLy8gSWYgdGhlIGtleSBpcyBub3Qgc2V0LCB3ZSBvbmx5IGxpc3RlbiBmb3IgbW9kaWZpZXJzLCB0aGF0IGNoZWNrIHdlbnQgYWxyaWdodCwgc28gd2UgcmV0dXJuIHRydWVcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBUaGVyZSBpcyBub3RoaW5nIHRoYXQgbWF0Y2hlcy5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIEJvdW5kSG90a2V5c1Byb3h5UHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovcmVhY3QuY3JlYXRlQ29udGV4dCh1bmRlZmluZWQpO1xudmFyIHVzZUJvdW5kSG90a2V5c1Byb3h5ID0gZnVuY3Rpb24gdXNlQm91bmRIb3RrZXlzUHJveHkoKSB7XG4gIHJldHVybiByZWFjdC51c2VDb250ZXh0KEJvdW5kSG90a2V5c1Byb3h5UHJvdmlkZXIpO1xufTtcbmZ1bmN0aW9uIEJvdW5kSG90a2V5c1Byb3h5UHJvdmlkZXJQcm92aWRlcihfcmVmKSB7XG4gIHZhciBhZGRIb3RrZXkgPSBfcmVmLmFkZEhvdGtleSxcbiAgICByZW1vdmVIb3RrZXkgPSBfcmVmLnJlbW92ZUhvdGtleSxcbiAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovanN4UnVudGltZS5qc3goQm91bmRIb3RrZXlzUHJveHlQcm92aWRlci5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB7XG4gICAgICBhZGRIb3RrZXk6IGFkZEhvdGtleSxcbiAgICAgIHJlbW92ZUhvdGtleTogcmVtb3ZlSG90a2V5XG4gICAgfSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGRlZXBFcXVhbCh4LCB5KSB7XG4gIC8vQHRzLWlnbm9yZVxuICByZXR1cm4geCAmJiB5ICYmIHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgeSA9PT0gJ29iamVjdCcgPyBPYmplY3Qua2V5cyh4KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKHkpLmxlbmd0aCAmJlxuICAvL0B0cy1pZ25vcmVcbiAgT2JqZWN0LmtleXMoeCkucmVkdWNlKGZ1bmN0aW9uIChpc0VxdWFsLCBrZXkpIHtcbiAgICByZXR1cm4gaXNFcXVhbCAmJiBkZWVwRXF1YWwoeFtrZXldLCB5W2tleV0pO1xuICB9LCB0cnVlKSA6IHggPT09IHk7XG59XG5cbnZhciBIb3RrZXlzQ29udGV4dCA9IC8qI19fUFVSRV9fKi9yZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgaG90a2V5czogW10sXG4gIGVuYWJsZWRTY29wZXM6IFtdLFxuICB0b2dnbGVTY29wZTogZnVuY3Rpb24gdG9nZ2xlU2NvcGUoKSB7fSxcbiAgZW5hYmxlU2NvcGU6IGZ1bmN0aW9uIGVuYWJsZVNjb3BlKCkge30sXG4gIGRpc2FibGVTY29wZTogZnVuY3Rpb24gZGlzYWJsZVNjb3BlKCkge31cbn0pO1xudmFyIHVzZUhvdGtleXNDb250ZXh0ID0gZnVuY3Rpb24gdXNlSG90a2V5c0NvbnRleHQoKSB7XG4gIHJldHVybiByZWFjdC51c2VDb250ZXh0KEhvdGtleXNDb250ZXh0KTtcbn07XG52YXIgSG90a2V5c1Byb3ZpZGVyID0gZnVuY3Rpb24gSG90a2V5c1Byb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIF9yZWYkaW5pdGlhbGx5QWN0aXZlUyA9IF9yZWYuaW5pdGlhbGx5QWN0aXZlU2NvcGVzLFxuICAgIGluaXRpYWxseUFjdGl2ZVNjb3BlcyA9IF9yZWYkaW5pdGlhbGx5QWN0aXZlUyA9PT0gdm9pZCAwID8gWycqJ10gOiBfcmVmJGluaXRpYWxseUFjdGl2ZVMsXG4gICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuO1xuICB2YXIgX3VzZVN0YXRlID0gcmVhY3QudXNlU3RhdGUoKGluaXRpYWxseUFjdGl2ZVNjb3BlcyA9PSBudWxsID8gdm9pZCAwIDogaW5pdGlhbGx5QWN0aXZlU2NvcGVzLmxlbmd0aCkgPiAwID8gaW5pdGlhbGx5QWN0aXZlU2NvcGVzIDogWycqJ10pLFxuICAgIGludGVybmFsQWN0aXZlU2NvcGVzID0gX3VzZVN0YXRlWzBdLFxuICAgIHNldEludGVybmFsQWN0aXZlU2NvcGVzID0gX3VzZVN0YXRlWzFdO1xuICB2YXIgX3VzZVN0YXRlMiA9IHJlYWN0LnVzZVN0YXRlKFtdKSxcbiAgICBib3VuZEhvdGtleXMgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldEJvdW5kSG90a2V5cyA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBlbmFibGVTY29wZSA9IHJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChzY29wZSkge1xuICAgIHNldEludGVybmFsQWN0aXZlU2NvcGVzKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICBpZiAocHJldi5pbmNsdWRlcygnKicpKSB7XG4gICAgICAgIHJldHVybiBbc2NvcGVdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChbXS5jb25jYXQocHJldiwgW3Njb3BlXSkpKTtcbiAgICB9KTtcbiAgfSwgW10pO1xuICB2YXIgZGlzYWJsZVNjb3BlID0gcmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHNjb3BlKSB7XG4gICAgc2V0SW50ZXJuYWxBY3RpdmVTY29wZXMoZnVuY3Rpb24gKHByZXYpIHtcbiAgICAgIGlmIChwcmV2LmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgICAgICByZXR1cm4gcyAhPT0gc2NvcGU7XG4gICAgICB9KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFsnKiddO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHByZXYuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgcmV0dXJuIHMgIT09IHNjb3BlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW10pO1xuICB2YXIgdG9nZ2xlU2NvcGUgPSByZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoc2NvcGUpIHtcbiAgICBzZXRJbnRlcm5hbEFjdGl2ZVNjb3BlcyhmdW5jdGlvbiAocHJldikge1xuICAgICAgaWYgKHByZXYuaW5jbHVkZXMoc2NvcGUpKSB7XG4gICAgICAgIGlmIChwcmV2LmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiBzICE9PSBzY29wZTtcbiAgICAgICAgfSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFsnKiddO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBwcmV2LmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHMgIT09IHNjb3BlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJldi5pbmNsdWRlcygnKicpKSB7XG4gICAgICAgICAgcmV0dXJuIFtzY29wZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChbXS5jb25jYXQocHJldiwgW3Njb3BlXSkpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW10pO1xuICB2YXIgYWRkQm91bmRIb3RrZXkgPSByZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaG90a2V5KSB7XG4gICAgc2V0Qm91bmRIb3RrZXlzKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gW10uY29uY2F0KHByZXYsIFtob3RrZXldKTtcbiAgICB9KTtcbiAgfSwgW10pO1xuICB2YXIgcmVtb3ZlQm91bmRIb3RrZXkgPSByZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaG90a2V5KSB7XG4gICAgc2V0Qm91bmRIb3RrZXlzKGZ1bmN0aW9uIChwcmV2KSB7XG4gICAgICByZXR1cm4gcHJldi5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuICFkZWVwRXF1YWwoaCwgaG90a2V5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovanN4UnVudGltZS5qc3goSG90a2V5c0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZToge1xuICAgICAgZW5hYmxlZFNjb3BlczogaW50ZXJuYWxBY3RpdmVTY29wZXMsXG4gICAgICBob3RrZXlzOiBib3VuZEhvdGtleXMsXG4gICAgICBlbmFibGVTY29wZTogZW5hYmxlU2NvcGUsXG4gICAgICBkaXNhYmxlU2NvcGU6IGRpc2FibGVTY29wZSxcbiAgICAgIHRvZ2dsZVNjb3BlOiB0b2dnbGVTY29wZVxuICAgIH0sXG4gICAgY2hpbGRyZW46IC8qI19fUFVSRV9fKi9qc3hSdW50aW1lLmpzeChCb3VuZEhvdGtleXNQcm94eVByb3ZpZGVyUHJvdmlkZXIsIHtcbiAgICAgIGFkZEhvdGtleTogYWRkQm91bmRIb3RrZXksXG4gICAgICByZW1vdmVIb3RrZXk6IHJlbW92ZUJvdW5kSG90a2V5LFxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgfSlcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiB1c2VEZWVwRXF1YWxNZW1vKHZhbHVlKSB7XG4gIHZhciByZWYgPSByZWFjdC51c2VSZWYodW5kZWZpbmVkKTtcbiAgaWYgKCFkZWVwRXF1YWwocmVmLmN1cnJlbnQsIHZhbHVlKSkge1xuICAgIHJlZi5jdXJyZW50ID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHJlZi5jdXJyZW50O1xufVxuXG52YXIgc3RvcFByb3BhZ2F0aW9uID0gZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKGUpIHtcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xufTtcbnZhciB1c2VTYWZlTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdC51c2VMYXlvdXRFZmZlY3QgOiByZWFjdC51c2VFZmZlY3Q7XG5mdW5jdGlvbiB1c2VIb3RrZXlzKGtleXMsIGNhbGxiYWNrLCBvcHRpb25zLCBkZXBlbmRlbmNpZXMpIHtcbiAgdmFyIHJlZiA9IHJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhc1RyaWdnZXJlZFJlZiA9IHJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHZhciBfb3B0aW9ucyA9ICEob3B0aW9ucyBpbnN0YW5jZW9mIEFycmF5KSA/IG9wdGlvbnMgOiAhKGRlcGVuZGVuY2llcyBpbnN0YW5jZW9mIEFycmF5KSA/IGRlcGVuZGVuY2llcyA6IHVuZGVmaW5lZDtcbiAgdmFyIF9rZXlzID0gaXNSZWFkb25seUFycmF5KGtleXMpID8ga2V5cy5qb2luKF9vcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBfb3B0aW9ucy5zcGxpdEtleSkgOiBrZXlzO1xuICB2YXIgX2RlcHMgPSBvcHRpb25zIGluc3RhbmNlb2YgQXJyYXkgPyBvcHRpb25zIDogZGVwZW5kZW5jaWVzIGluc3RhbmNlb2YgQXJyYXkgPyBkZXBlbmRlbmNpZXMgOiB1bmRlZmluZWQ7XG4gIHZhciBtZW1vaXNlZENCID0gcmVhY3QudXNlQ2FsbGJhY2soY2FsbGJhY2ssIF9kZXBzICE9IG51bGwgPyBfZGVwcyA6IFtdKTtcbiAgdmFyIGNiUmVmID0gcmVhY3QudXNlUmVmKG1lbW9pc2VkQ0IpO1xuICBpZiAoX2RlcHMpIHtcbiAgICBjYlJlZi5jdXJyZW50ID0gbWVtb2lzZWRDQjtcbiAgfSBlbHNlIHtcbiAgICBjYlJlZi5jdXJyZW50ID0gY2FsbGJhY2s7XG4gIH1cbiAgdmFyIG1lbW9pc2VkT3B0aW9ucyA9IHVzZURlZXBFcXVhbE1lbW8oX29wdGlvbnMpO1xuICB2YXIgX3VzZUhvdGtleXNDb250ZXh0ID0gdXNlSG90a2V5c0NvbnRleHQoKSxcbiAgICBlbmFibGVkU2NvcGVzID0gX3VzZUhvdGtleXNDb250ZXh0LmVuYWJsZWRTY29wZXM7XG4gIHZhciBwcm94eSA9IHVzZUJvdW5kSG90a2V5c1Byb3h5KCk7XG4gIHVzZVNhZmVMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICgobWVtb2lzZWRPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBtZW1vaXNlZE9wdGlvbnMuZW5hYmxlZCkgPT09IGZhbHNlIHx8ICFpc1Njb3BlQWN0aXZlKGVuYWJsZWRTY29wZXMsIG1lbW9pc2VkT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVtb2lzZWRPcHRpb25zLnNjb3BlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoZSwgaXNLZXlVcCkge1xuICAgICAgdmFyIF9lJHRhcmdldDtcbiAgICAgIGlmIChpc0tleVVwID09PSB2b2lkIDApIHtcbiAgICAgICAgaXNLZXlVcCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGlzS2V5Ym9hcmRFdmVudFRyaWdnZXJlZEJ5SW5wdXQoZSkgJiYgIWlzSG90a2V5RW5hYmxlZE9uVGFnKGUsIG1lbW9pc2VkT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVtb2lzZWRPcHRpb25zLmVuYWJsZU9uRm9ybVRhZ3MpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChtZW1vaXNlZE9wdGlvbnMgIT0gbnVsbCAmJiBtZW1vaXNlZE9wdGlvbnMuaWdub3JlRXZlbnRXaGVuICE9IG51bGwgJiYgbWVtb2lzZWRPcHRpb25zLmlnbm9yZUV2ZW50V2hlbihlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBUT0RPOiBTSU5DRSBUSEUgRVZFTlQgSVMgTk9XIEFUVEFDSEVEIFRPIFRIRSBSRUYsIFRIRSBBQ1RJVkUgRUxFTUVOVCBDQU4gTkVWRVIgQkUgSU5TSURFIFRIRSBSRUYuIFRIRSBIT1RLRVkgT05MWSBUUklHR0VSUyBJRiBUSEVcbiAgICAgIC8vIFJFRiBJUyBUSEUgQUNUSVZFIEVMRU1FTlQuIFRISVMgSVMgQSBQUk9CTEVNIFNJTkNFIEZPQ1VTRUQgU1VCIENPTVBPTkVOVFMgV09OJ1QgVFJJR0dFUiBUSEUgSE9US0VZLlxuICAgICAgaWYgKHJlZi5jdXJyZW50ICE9PSBudWxsICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHJlZi5jdXJyZW50ICYmICFyZWYuY3VycmVudC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICBzdG9wUHJvcGFnYXRpb24oZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICgoX2UkdGFyZ2V0ID0gZS50YXJnZXQpICE9IG51bGwgJiYgX2UkdGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlICYmICEobWVtb2lzZWRPcHRpb25zICE9IG51bGwgJiYgbWVtb2lzZWRPcHRpb25zLmVuYWJsZU9uQ29udGVudEVkaXRhYmxlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwYXJzZUtleXNIb29rSW5wdXQoX2tleXMsIG1lbW9pc2VkT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVtb2lzZWRPcHRpb25zLnNwbGl0S2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIF9ob3RrZXkka2V5cztcbiAgICAgICAgdmFyIGhvdGtleSA9IHBhcnNlSG90a2V5KGtleSwgbWVtb2lzZWRPcHRpb25zID09IG51bGwgPyB2b2lkIDAgOiBtZW1vaXNlZE9wdGlvbnMuY29tYmluYXRpb25LZXkpO1xuICAgICAgICBpZiAoaXNIb3RrZXlNYXRjaGluZ0tleWJvYXJkRXZlbnQoZSwgaG90a2V5LCBtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5pZ25vcmVNb2RpZmllcnMpIHx8IChfaG90a2V5JGtleXMgPSBob3RrZXkua2V5cykgIT0gbnVsbCAmJiBfaG90a2V5JGtleXMuaW5jbHVkZXMoJyonKSkge1xuICAgICAgICAgIGlmIChpc0tleVVwICYmIGhhc1RyaWdnZXJlZFJlZi5jdXJyZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIG1heWJlUHJldmVudERlZmF1bHQoZSwgaG90a2V5LCBtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5wcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgaWYgKCFpc0hvdGtleUVuYWJsZWQoZSwgaG90a2V5LCBtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5lbmFibGVkKSkge1xuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uKGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBFeGVjdXRlIHRoZSB1c2VyIGNhbGxiYWNrIGZvciB0aGF0IGhvdGtleVxuICAgICAgICAgIGNiUmVmLmN1cnJlbnQoZSwgaG90a2V5KTtcbiAgICAgICAgICBpZiAoIWlzS2V5VXApIHtcbiAgICAgICAgICAgIGhhc1RyaWdnZXJlZFJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgdmFyIGhhbmRsZUtleURvd24gPSBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQua2V5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gU3ludGhldGljIGV2ZW50IChlLmcuLCBDaHJvbWUgYXV0b2ZpbGwpLiAgSWdub3JlLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwdXNoVG9DdXJyZW50bHlQcmVzc2VkS2V5cyhtYXBLZXkoZXZlbnQuY29kZSkpO1xuICAgICAgaWYgKChtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5rZXlkb3duKSA9PT0gdW5kZWZpbmVkICYmIChtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5rZXl1cCkgIT09IHRydWUgfHwgbWVtb2lzZWRPcHRpb25zICE9IG51bGwgJiYgbWVtb2lzZWRPcHRpb25zLmtleWRvd24pIHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGhhbmRsZUtleVVwID0gZnVuY3Rpb24gaGFuZGxlS2V5VXAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5rZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBTeW50aGV0aWMgZXZlbnQgKGUuZy4sIENocm9tZSBhdXRvZmlsbCkuICBJZ25vcmUuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlbW92ZUZyb21DdXJyZW50bHlQcmVzc2VkS2V5cyhtYXBLZXkoZXZlbnQuY29kZSkpO1xuICAgICAgaGFzVHJpZ2dlcmVkUmVmLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIGlmIChtZW1vaXNlZE9wdGlvbnMgIT0gbnVsbCAmJiBtZW1vaXNlZE9wdGlvbnMua2V5dXApIHtcbiAgICAgICAgbGlzdGVuZXIoZXZlbnQsIHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGRvbU5vZGUgPSByZWYuY3VycmVudCB8fCAoX29wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IF9vcHRpb25zLmRvY3VtZW50KSB8fCBkb2N1bWVudDtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUtleVVwKTtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZG9tTm9kZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgaWYgKHByb3h5KSB7XG4gICAgICBwYXJzZUtleXNIb29rSW5wdXQoX2tleXMsIG1lbW9pc2VkT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVtb2lzZWRPcHRpb25zLnNwbGl0S2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3h5LmFkZEhvdGtleShwYXJzZUhvdGtleShrZXksIG1lbW9pc2VkT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVtb2lzZWRPcHRpb25zLmNvbWJpbmF0aW9uS2V5LCBtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5kZXNjcmlwdGlvbikpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBkb21Ob2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleXVwJywgaGFuZGxlS2V5VXApO1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgZG9tTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93bik7XG4gICAgICBpZiAocHJveHkpIHtcbiAgICAgICAgcGFyc2VLZXlzSG9va0lucHV0KF9rZXlzLCBtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5zcGxpdEtleSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIHByb3h5LnJlbW92ZUhvdGtleShwYXJzZUhvdGtleShrZXksIG1lbW9pc2VkT3B0aW9ucyA9PSBudWxsID8gdm9pZCAwIDogbWVtb2lzZWRPcHRpb25zLmNvbWJpbmF0aW9uS2V5LCBtZW1vaXNlZE9wdGlvbnMgPT0gbnVsbCA/IHZvaWQgMCA6IG1lbW9pc2VkT3B0aW9ucy5kZXNjcmlwdGlvbikpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbX2tleXMsIG1lbW9pc2VkT3B0aW9ucywgZW5hYmxlZFNjb3Blc10pO1xuICByZXR1cm4gcmVmO1xufVxuXG5mdW5jdGlvbiB1c2VSZWNvcmRIb3RrZXlzKCkge1xuICB2YXIgX3VzZVN0YXRlID0gcmVhY3QudXNlU3RhdGUobmV3IFNldCgpKSxcbiAgICBrZXlzID0gX3VzZVN0YXRlWzBdLFxuICAgIHNldEtleXMgPSBfdXNlU3RhdGVbMV07XG4gIHZhciBfdXNlU3RhdGUyID0gcmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgIGlzUmVjb3JkaW5nID0gX3VzZVN0YXRlMlswXSxcbiAgICBzZXRJc1JlY29yZGluZyA9IF91c2VTdGF0ZTJbMV07XG4gIHZhciBoYW5kbGVyID0gcmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LmtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBTeW50aGV0aWMgZXZlbnQgKGUuZy4sIENocm9tZSBhdXRvZmlsbCkuICBJZ25vcmUuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgc2V0S2V5cyhmdW5jdGlvbiAocHJldikge1xuICAgICAgdmFyIG5ld0tleXMgPSBuZXcgU2V0KHByZXYpO1xuICAgICAgbmV3S2V5cy5hZGQobWFwS2V5KGV2ZW50LmNvZGUpKTtcbiAgICAgIHJldHVybiBuZXdLZXlzO1xuICAgIH0pO1xuICB9LCBbXSk7XG4gIHZhciBzdG9wID0gcmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlcik7XG4gICAgICBzZXRJc1JlY29yZGluZyhmYWxzZSk7XG4gICAgfVxuICB9LCBbaGFuZGxlcl0pO1xuICB2YXIgc3RhcnQgPSByZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgc2V0S2V5cyhuZXcgU2V0KCkpO1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzdG9wKCk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlcik7XG4gICAgICBzZXRJc1JlY29yZGluZyh0cnVlKTtcbiAgICB9XG4gIH0sIFtoYW5kbGVyLCBzdG9wXSk7XG4gIHJldHVybiBba2V5cywge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBzdG9wOiBzdG9wLFxuICAgIGlzUmVjb3JkaW5nOiBpc1JlY29yZGluZ1xuICB9XTtcbn1cblxuZXhwb3J0cy5Ib3RrZXlzUHJvdmlkZXIgPSBIb3RrZXlzUHJvdmlkZXI7XG5leHBvcnRzLmlzSG90a2V5UHJlc3NlZCA9IGlzSG90a2V5UHJlc3NlZDtcbmV4cG9ydHMudXNlSG90a2V5cyA9IHVzZUhvdGtleXM7XG5leHBvcnRzLnVzZUhvdGtleXNDb250ZXh0ID0gdXNlSG90a2V5c0NvbnRleHQ7XG5leHBvcnRzLnVzZVJlY29yZEhvdGtleXMgPSB1c2VSZWNvcmRIb3RrZXlzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3QtaG90a2V5cy1ob29rLmNqcy5kZXZlbG9wbWVudC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-hotkeys-hook/dist/react-hotkeys-hook.cjs.development.js\n");

/***/ })

};
;